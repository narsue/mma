# 30MB docker image - with compressed binary, + upx binary
# ---- Stage 1: build + package ----
FROM docker.io/rust:1.87-slim AS builder
WORKDIR /app

# install what we need to build + busybox-static for later
RUN apt-get update \
 && apt-get install -y \
      pkg-config libssl-dev build-essential \
      tar gzip busybox-static curl \
 && rm -rf /var/lib/apt/lists/*

# Install UPX
RUN curl -L https://github.com/upx/upx/releases/download/v5.0.1/upx-5.0.1-amd64_linux.tar.xz | tar -xJ \
 && mv upx-5.0.1-amd64_linux/upx /usr/local/bin/ \
 && chmod +x /usr/local/bin/upx

COPY Cargo.toml Cargo.lock ./
COPY src/        src/
COPY benches/    benches/

# apply your sed patches…
RUN sed -i 's/ mma/ ci_mma/g' src/db.rs \
 && sed -i 's/"mma"/"ci_mma"/g' src/db.rs \
 && sed -i 's/127.0.0.1:9042/mmapod:9042/g' src/main.rs

RUN cargo build --release
RUN strip target/release/mma
RUN ls -lh target/release/mma
RUN upx --lzma target/release/mma
RUN ls -lh target/release/mma


# package into a tar.gz
RUN tar czf /mma_app.tar.gz -C target/release mma

# capture ENV file
RUN echo "DEV_MODE=1" > /.env_runtime

# ---- Stage 2: runtime ----
FROM gcr.io/distroless/cc-debian12:nonroot
WORKDIR /app

# 1) copy the one and only helper: a static busybox
COPY --from=builder /bin/busybox /busybox

# 2) copy your compressed payload + assets + .env
COPY --from=builder --chown=65532:65532 /mma_app.tar.gz /app/mma_app.tar.gz
COPY --from=builder --chown=65532:65532 /.env_runtime     /app/.env
COPY --chown=65532:65532 templates         /app/templates
COPY --chown=65532:65532 schema            /app/schema
COPY --chown=65532:65532 auth              /app/auth

EXPOSE 1227

# 3) at container start, use busybox’s shell+tar:
#    a) extract into /tmp (which is 1777, so writable by our non-root)
#    b) exec the real binary from there
CMD ["/busybox", "sh", "-c", \
     "tar xzf /app/mma_app.tar.gz -C /tmp && exec /tmp/mma"]